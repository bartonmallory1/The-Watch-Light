@page "/response"


<Map Latitude="@Latitude" Longitude="@Longitude" Zoom="13"></Map>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Directions</h5>
        <p class="card-text">
            @foreach (var step in Directions)
            {
                <div>@step</div>
            }
        </p>
    </div>
</div>
<button class="btn btn-primary" @onclick="AcceptAssistance">Accept</button>

@code {
    private double Latitude { get; set; }
    private double Longitude { get; set; }
    private IEnumerable<string> Directions { get; set; }
    private int UserId { get; set; }
    private int AssistedUserId { get; set; }
    private readonly NavigationManager _navigation;
    private readonly IJSRuntime _jsRuntime;

    public Response(NavigationManager navigation, IJSRuntime jsRuntime)
    {
        _navigation = navigation;
        _jsRuntime = jsRuntime;
    }

    protected override async Task OnInitializedAsync()
    {
        var parameters = _navigation.ToAbsoluteUri(_navigation.Uri).GetComponents(UriComponents.Query, UriFormat.Unescaped);
        var data = System.Web.HttpUtility.ParseQueryString(parameters);

        UserId = int.Parse(data["userId"]);
        AssistedUserId = int.Parse(data["assistedUserId"]);
        Latitude = double.Parse(data["latitude"]);
        Longitude = double.Parse(data["longitude"]);
        Directions = await _jsRuntime.InvokeAsync<IEnumerable<string>>("getDirections", Latitude, Longitude);
    }

    private async Task AcceptAssistance()
    {
        // Accept the assistance and navigate to the appropriate page
        await _jsRuntime.InvokeVoidAsync("acceptAssistance", UserId, AssistedUserId);
        _navigation.NavigateTo("/assistance-accepted");
    }
}